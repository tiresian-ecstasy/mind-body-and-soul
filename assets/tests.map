{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","mind-body-and-soul/tests/affinity-engine/stage/scenes/intro.jshint.lint-test.js","mind-body-and-soul/tests/app.jshint.lint-test.js","mind-body-and-soul/tests/controllers/application.jshint.lint-test.js","mind-body-and-soul/tests/helpers/affinity-engine/stage/delay.js","mind-body-and-soul/tests/helpers/affinity-engine/stage/register-test-helpers.js","mind-body-and-soul/tests/helpers/affinity-engine/stage/step.js","mind-body-and-soul/tests/helpers/destroy-app.js","mind-body-and-soul/tests/helpers/destroy-app.jshint.lint-test.js","mind-body-and-soul/tests/helpers/ember-keyboard/register-test-helpers.js","mind-body-and-soul/tests/helpers/module-for-acceptance.js","mind-body-and-soul/tests/helpers/module-for-acceptance.jshint.lint-test.js","mind-body-and-soul/tests/helpers/resolver.js","mind-body-and-soul/tests/helpers/resolver.jshint.lint-test.js","mind-body-and-soul/tests/helpers/start-app.js","mind-body-and-soul/tests/helpers/start-app.jshint.lint-test.js","mind-body-and-soul/tests/resolver.jshint.lint-test.js","mind-body-and-soul/tests/router.jshint.lint-test.js","mind-body-and-soul/tests/test-helper.js","mind-body-and-soul/tests/test-helper.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('mind-body-and-soul/tests/affinity-engine/stage/scenes/intro.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | affinity-engine/stage/scenes/intro.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'affinity-engine/stage/scenes/intro.js should pass jshint.\\naffinity-engine/stage/scenes/intro.js: line 7, col 32, Missing semicolon.\\n\\n1 error');\n  });\n});","define('mind-body-and-soul/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/controllers/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 41, col 3, Missing semicolon.\\n\\n1 error');\n  });\n});","define('mind-body-and-soul/tests/helpers/affinity-engine/stage/delay', ['exports', 'ember'], function (exports, _ember) {\n  var Promise = _ember['default'].RSVP.Promise;\n  var later = _ember['default'].run.later;\n\n  exports['default'] = function (app) {\n    var duration = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n    return new Promise(function (resolve) {\n      later(function () {\n        resolve();\n      }, duration);\n    });\n  };\n});","define('mind-body-and-soul/tests/helpers/affinity-engine/stage/register-test-helpers', ['exports', 'ember', 'mind-body-and-soul/tests/helpers/affinity-engine/stage/delay', 'mind-body-and-soul/tests/helpers/affinity-engine/stage/step'], function (exports, _ember, _mindBodyAndSoulTestsHelpersAffinityEngineStageDelay, _mindBodyAndSoulTestsHelpersAffinityEngineStageStep) {\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('delay', _mindBodyAndSoulTestsHelpersAffinityEngineStageDelay['default']);\n    _ember['default'].Test.registerAsyncHelper('step', _mindBodyAndSoulTestsHelpersAffinityEngineStageStep['default']);\n  };\n});","define('mind-body-and-soul/tests/helpers/affinity-engine/stage/step', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = function (app, duration) {\n    triggerEvent(document, 'keyup', {\n      keyCode: 32,\n      which: 32,\n      altKey: true,\n      ctrlKey: true,\n      shiftKey: true\n    });\n\n    return delay(duration);\n  };\n});","define('mind-body-and-soul/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mind-body-and-soul/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _ember, _emberKeyboard, _emberKeyboardFixturesModifiersArray, _emberKeyboardUtilsGetCmdKey) {\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (_emberKeyboardFixturesModifiersArray['default'].indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _emberKeyboardUtilsGetCmdKey['default'])() : attribute;\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n});","define('mind-body-and-soul/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'mind-body-and-soul/tests/helpers/start-app', 'mind-body-and-soul/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _mindBodyAndSoulTestsHelpersStartApp, _mindBodyAndSoulTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _mindBodyAndSoulTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _mindBodyAndSoulTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('mind-body-and-soul/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/helpers/resolver', ['exports', 'mind-body-and-soul/resolver', 'mind-body-and-soul/config/environment'], function (exports, _mindBodyAndSoulResolver, _mindBodyAndSoulConfigEnvironment) {\n\n  var resolver = _mindBodyAndSoulResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _mindBodyAndSoulConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _mindBodyAndSoulConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mind-body-and-soul/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/helpers/start-app', ['exports', 'ember', 'mind-body-and-soul/app', 'mind-body-and-soul/config/environment'], function (exports, _ember, _mindBodyAndSoulApp, _mindBodyAndSoulConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _mindBodyAndSoulConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _mindBodyAndSoulApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('mind-body-and-soul/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('mind-body-and-soul/tests/test-helper', ['exports', 'mind-body-and-soul/tests/helpers/resolver', 'ember-qunit'], function (exports, _mindBodyAndSoulTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_mindBodyAndSoulTestsHelpersResolver['default']);\n});","define('mind-body-and-soul/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mind-body-and-soul/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}